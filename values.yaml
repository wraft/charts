# values.yaml
# Configuration file for the WRAFT application Helm chart.
# This file defines the customizable parameters for deploying the WRAFT stack.

# Global configuration parameters shared across all components
global:
  # Environment type (dev, staging, prod)
  environment: 'prod'
  # Domain name for the application
  domain: ''
  # Default storage class for persistent volumes
  storageClass: ''
  # Common image pull policy for all services
  imagePullPolicy: IfNotPresent
  # Common resource settings that can be overridden at the component level
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  # Image pull secrets for private registries
  imagePullSecrets: []
  # - name: regcred

  # Network policies
  networkPolicy:
    enabled: true
    # Default egress rules
    defaultDenyEgress: false
    # Default ingress rules
    defaultDenyIngress: false

  # Pod security context
  podSecurityContext:
    enabled: false
    fsGroup: 1000
    runAsUser: 1000
    runAsNonRoot: true

  # Container security context
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL

  # Node selector for all pods
  nodeSelector: {}

  # Tolerations for all pods
  tolerations: []

  # Affinity rules for all pods
  affinity: {}

  # Pod disruption budget
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    # maxUnavailable: 1

# Environment variables for substitution
env:
  POSTGRES_USER: 'postgres'
  POSTGRES_PASSWORD: 'postgres'
  POSTGRES_DB: 'wraft_data'
  DB_HOST: 'wraft-db.default.svc.cluster.local'
  DB_PORT: '5432'
  MINIO_SERVICE_NAME: 'wraft-minio'
  TYPESENSE_SERVICE_NAME: 'wraft-typesense'
  NAMESPACE: 'default'
  DOMAIN: 'local'

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

# Frontend application configuration
frontend:
  # Component name
  name: wraft-frontend
  # Deployment configuration
  enabled: true
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  # Deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  # Container image configuration
  image:
    repository: quay.io/wraft/wraft-frontend
    tag: 'latest' # Use specific version tags for production
    pullPolicy: IfNotPresent
    # digest: "sha256:abcdef..."  # For immutable deployments
  # Service configuration
  service:
    type: ClusterIP # Use ClusterIP for better security
    port: 3000
    targetPort: 3000
  # Resource allocation
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  # Pod annotations and labels
  podAnnotations: {}
  podLabels: {}
  # Security contexts (override globals)
  podSecurityContext:
    enabled: true
  containerSecurityContext:
    enabled: true
  # Liveness and readiness probes
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /
      port: http
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /
      port: http
  # Startup probe for slow-starting applications
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
    httpGet:
      path: /
      port: http
  # Node selector, tolerations, and affinity
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Init containers
  initContainers: []
  # Sidecars
  sidecars: []
  # Environment variables
  env: {}
  # Environment variables from ConfigMaps and Secrets
  envFrom: []
  # Volume mounts
  volumeMounts: []
  # Volumes
  volumes: []

backend:
  # Component name
  name: wraft-backend
  # Deployment configuration
  enabled: true
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  # Deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  # Container image configuration
  image:
    repository: aurut/wraft-docs-api-v1
    tag: v0.18.3
    pullPolicy: IfNotPresent
    # digest: "sha256:abcdef..."  # For immutable deployments
  # Service configuration
  service:
    type: ClusterIP
    port: 4000
    targetPort: 4000
  # Environment variables
  env:
    MIX_ENV: 'prod'
    # Database connection string - will be templated in the deployment
    DATABASE_URL: 'postgres://postgres:postgres@wraft-db.default.svc.cluster.local:5432/wraft_data?ssl=false'
    MINIO_URL: 'http://minio-api.local:30080'
    MINIO_HOST: 'minio-api.local'
    MINIO_PORT: '30080'
    MINIO_BUCKET: 'wraft'
    SENTRY_DSN: ''
    XELATEX_PATH: 'xelatex'
    TYPESENSE_HOST: 'wraft-typesense.default.svc.cluster.local'
  # Resource allocation
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  # Pod annotations and labels
  podAnnotations: {}
  podLabels: {}
  # Security contexts (override globals)
  podSecurityContext:
    enabled: true
  containerSecurityContext:
    enabled: true
  # Liveness and readiness probes
  livenessProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /api/health
      port: http
  readinessProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /api/health
      port: http
  # Startup probe for slow-starting applications
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
    httpGet:
      path: /api/health
      port: http
  # Node selector, tolerations, and affinity
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Init containers
  initContainers: []
  # Sidecars
  sidecars: []
  # Environment variables from ConfigMaps and Secrets
  envFrom:
    - secretRef:
        name: my-wraft-secrets

  # Volume mounts
  volumeMounts: []
  # Volumes
  volumes: []

# PostgreSQL database configuration
db:
  # Component name
  name: wraft-db
  # Deployment configuration
  enabled: true
  # Use external database
  external:
    enabled: false
    host: ''
    port: 5432
    database: ''
    username: ''
    existingSecret: ''
    existingSecretPasswordKey: 'postgresql-password'
  # StatefulSet configuration
  statefulset:
    Strategy: RollingUpdate
    podManagementPolicy: OrderedReady
  # Container image configuration
  image:
    repository: postgres
    tag: 14-alpine
    pullPolicy: IfNotPresent
  # Service configuration
  service:
    type: ClusterIP
    port: 5432
    targetPort: 5432
  # Environment variables
  env:
    POSTGRES_USER: 'postgres'
    POSTGRES_PASSWORD: 'postgres' # Will be auto-generated if empty
    POSTGRES_DB: 'wraft_data'
  # Persistence configuration
  persistence:
    enabled: true
    storageClass: '' # Uses global.storageClass if not specified
    size: 1Gi
    accessMode: ReadWriteOnce
    annotations: {}
    # Backup and restore
    backup:
      enabled: false
      schedule: '0 0 * * *'
      retention: 7
      storageClass: ''
      size: 1Gi
  # Resource allocation
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  # Pod annotations and labels
  podAnnotations: {}
  podLabels: {}
  # Security contexts (override globals)
  podSecurityContext:
    enabled: false
    fsGroup: 999
    runAsUser: 999
    runAsNonRoot: true
  containerSecurityContext:
    enabled: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false # Postgres needs to write to its data directory
  # Liveness and readiness probes
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    exec:
      command:
        - pg_isready
        - -U
        - postgres
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    exec:
      command:
        - pg_isready
        - -U
        - postgres
  # Node selector, tolerations, and affinity
  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - wraft-db
            topologyKey: kubernetes.io/hostname
  # Init containers
  initContainers: []
  # Sidecars
  sidecars: []

# MinIO object storage configuration
minio:
  # Component name
  name: wraft-minio
  # Deployment configuration
  enabled: true
  replicaCount: 1
  # Use external MinIO or S3-compatible storage
  external:
    enabled: false
    endpoint: ''
    accessKey: ''
    secretKey: ''
    existingSecret: ''
    region: ''
    bucket: 'wraft'
  # Container image configuration
  image:
    repository: quay.io/minio/minio
    tag: RELEASE.2023-07-21T21-12-44Z # Use specific version tags for production
    pullPolicy: IfNotPresent
  # Service configuration
  service:
    type: ClusterIP # Use ClusterIP for better security
    ports:
      - name: api
        port: 9000
        targetPort: 9000
      - name: console
        port: 9001
        targetPort: 9001
  # Container command
  command:
    - 'minio'
    - 'server'
    - '/data'
    - '--console-address=:9001'
  # Environment variables
  env:
    MINIO_ROOT_USER: '' # Will be auto-generated if empty
    MINIO_ROOT_PASSWORD: '' # Will be auto-generated if empty
    # MinIO server configuration
    MINIO_SERVER_URL: 'http://minio-api.local:30080'
    MINIO_PROMETHEUS_AUTH_TYPE: 'public'
  # Persistence configuration
  persistence:
    enabled: true
    storageClass: '' # Uses global.storageClass if not specified
    size: 1Gi
    accessMode: ReadWriteOnce
    # For production, consider using multiple PVs
    volumeClaimTemplate:
      enabled: false
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  # Resource allocation
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  # Pod annotations and labels
  podAnnotations: {}
  podLabels: {}
  # Security contexts (override globals)
  podSecurityContext:
    enabled: true
    fsGroup: 1000
    runAsUser: 1000
    runAsNonRoot: true
  containerSecurityContext:
    enabled: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false # MinIO needs to write to its data directory
  # Liveness and readiness probes
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /minio/health/live
      port: api
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /minio/health/ready
      port: api
  # Node selector, tolerations, and affinity
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Bucket creation job configuration
  createBucket:
    enabled: true
    bucketName: 'wraft'
    # Job configuration
    image:
      repository: minio/mc
      tag: 'latest'
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    # Security contexts
    podSecurityContext:
      enabled: true
    containerSecurityContext:
      enabled: true
    # Retry policy
    backoffLimit: 3
    activeDeadlineSeconds: 600
    ttlSecondsAfterFinished: 300

# Typesense search service configuration
typesense:
  # Component configuration
  enabled: true
  name: wraft-typesense
  # Container image configuration
  image:
    repository: typesense/typesense
    tag: 28.0.rc35
    pullPolicy: IfNotPresent
  # Deployment configuration
  replicaCount: 1
  # Deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  # Service configuration
  service:
    name: wraft-typesense-service
    type: ClusterIP
    port: 8108
  # Environment variables
  env:
    TYPESENSE_DATA_DIR: '/data'
    TYPESENSE_API_KEY: '' # Will be auto-generated if empty
    TYPESENSE_ENABLE_CORS: 'true'
  # Persistence configuration
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 5Gi
    storageClass: '' # Uses global.storageClass if not specified
  # Resource allocation
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  # Pod annotations and labels
  podAnnotations: {}
  podLabels: {}
  # Security contexts (override globals)
  podSecurityContext:
    enabled: true
  containerSecurityContext:
    enabled: true
    readOnlyRootFilesystem: false # Typesense needs to write to its data directory
  # Liveness and readiness probes
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /health
      port: http
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /health
      port: http
  # Node selector, tolerations, and affinity
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Init containers
  initContainers: []
  # Sidecars
  sidecars: []

# Ingress configuration
ingress:
  # Enable/disable ingress
  enabled: true
  className: 'nginx'
  # Annotations for the ingress controller
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    # Add more annotations as needed
    # kubernetes.io/tls-acme: "true"
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/proxy-body-size: "50m"
  # Enable TLS without specifying hosts/secretName (uses default)
  tlsEnabled: false
  # Host configurations
  hosts:
    # Frontend host
    - host: 'app'
      paths:
        - path: '/'
          pathType: Prefix
          service:
            name: 'wraft-frontend'
            port: 3000
    # Backend API host
    - host: 'api'
      paths:
        - path: '/'
          pathType: Prefix
          service:
            name: 'wraft-backend'
            port: 4000
      # MinIO console host
    - host: 'minio-console.local'
      paths:
        - path: '/'
          pathType: Prefix
          service:
            name: 'wraft-minio'
            port: 9001
    # MinIO API host
    - host: 'minio-api.local'
      paths:
        - path: '/'
          pathType: Prefix
          service:
            name: 'wraft-minio'
            port: 9000
    # Typesense host
    - host: 'search'
      paths:
        - path: '/'
          pathType: Prefix
          service:
            name: 'wraft-typesense-service'
            port: 8108
  # TLS configuration
  tls: []
  # - secretName: wraft-tls
  #   hosts:
  #     - app.local
  #     - api.local
  #     - minio-console.local
  #     - minio-api.local
  #     - search.local

# NGINX Ingress Controller configuration
ingress-nginx:
  controller:
    service:
      type: NodePort
      nodePorts:
        http: 30080
        https: 30443

# Security configuration
security:
  # Create default secrets
  createSecrets: true
  # Secret key generation
  secretKeyBase: '' # Auto-generated if empty
  guardianKey: '' # Auto-generated if empty
  # Pod Security Policies
  psp:
    enabled: false
  # Network Policies
  networkPolicies:
    enabled: true
  # Secret management
  secretProviderClass:
    enabled: false
    provider: '' # aws, azure, gcp, vault
    parameters: {}

# Monitoring and observability
monitoring:
  # Prometheus metrics
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      interval: 30s
      scrapeTimeout: 10s
      labels: {}
  # Grafana dashboards
  dashboards:
    enabled: false
  # Logging configuration
  logging:
    enabled: false
    # Log aggregation
    fluentd:
      enabled: false
    # Log persistence
    persistence:
      enabled: false
      size: 5Gi
  # Tracing configuration
  tracing:
    enabled: false
    provider: '' # jaeger, zipkin, datadog

# Backup and disaster recovery
backup:
  enabled: false
  schedule: '0 0 * * *'
  retention: 7
  # Velero configuration
  velero:
    enabled: false
    includeNamespaces:
      - '{{ .Release.Namespace }}'
    excludeResources: []
  # Database backup
  database:
    enabled: false
    type: 'pg_dump'
    destination: 's3://backups/{{ .Release.Namespace }}/db'
  # Object storage backup
  objectStorage:
    enabled: false
    destination: 's3://backups/{{ .Release.Namespace }}/minio'

# CI/CD integration
cicd:
  # ArgoCD configuration
  argocd:
    enabled: false
    syncWave: 0
    syncPolicy:
      automated:
        prune: true
        selfHeal: true
      syncOptions:
        - CreateNamespace=true
  # Flux configuration
  flux:
    enabled: false
    interval: 5m
    path: './environments/{{ .Values.global.environment }}'

# Path to environment-specific values
path: './environments/dev'
